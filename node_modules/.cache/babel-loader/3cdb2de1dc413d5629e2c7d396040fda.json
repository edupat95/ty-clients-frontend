{"ast":null,"code":"import axios from 'axios';\nimport { createWorkerAdapter } from '../adapters/worker.adapter';\nimport { createCashierAdapter } from '../adapters//Cashier/cashier.adapter';\nimport { createClubAdapter } from '../adapters/club.adapter';\nconst API_URL = \"http://localhost:8080/api\";\n\nconst login = async (username, password) => {\n  //console.log(\"Lo que llega a services/login \" + username + \" - \" + password);\n  var data = JSON.stringify({\n    \"username\": username,\n    \"password\": password\n  });\n  let response = await axios.post(API_URL + '/authenticate', data, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    console.log(\"service/authenticate/response->\" + JSON.stringify(response));\n    return response;\n  }).catch(function (error) {\n    console.log(\"Error al autenticarse y obtener el token. Type error -> \" + error);\n    return error;\n  }); //console.log(\"DATOS OBJTENIDOS EN RESPONSE -> \" + JSON.stringify(response.code));\n\n  switch (response.code) {\n    case \"ERR_NETWORK\":\n      return 0;\n\n    case \"ERR_BAD_REQUEST\":\n      return 401;\n\n    default:\n      break;\n  }\n\n  let response2 = await axios.get(API_URL + '/account', {\n    headers: {\n      'Authorization': 'Bearer ' + response.data.id_token\n    }\n  }).then(function (response) {\n    console.log(\"service/account/response->\" + JSON.stringify(response));\n    return response;\n  }).catch(function (error) {\n    console.error(\"Error al obtener datos del usuario. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n\n  switch (response2.code) {\n    case \"ERR_NETWORK\":\n      return 0;\n\n    case \"ERR_BAD_REQUEST\":\n      return 401;\n\n    default:\n      break;\n  } //console.log(\"DATOS OBJTENIDOS EN RESPONSE2 -> \" + JSON.stringify(response2.data));\n\n\n  let usuario;\n\n  if (response.status === 200 && response2.status === 200) {\n    const worker = await getWorkerByUser(response.data.id_token, response2.data.id); //console.log(\"DATOS DE CASHIER->\" + JSON.stringify(cashier));\n    //console.log(\"DATOS DEL CLUB ->\" + createClubAdapter(worker.club).nombre);\n\n    const club = createClubAdapter(worker.club);\n    usuario = {\n      id_token: response.data.id_token,\n      id: response2.data.id,\n      login: response2.data.login,\n      firstName: response2.data.firstName,\n      lastName: response2.data.lastName,\n      email: response2.data.email,\n      imageUrl: response2.data.imageUrl,\n      activated: response2.data.activated,\n      langKey: response2.data.langKey,\n      club: club\n    };\n    return usuario;\n  }\n};\n\nconst getWorkerByUser = async (token, user_id) => {\n  console.log(\"USER ID BUSCADO: \" + user_id);\n  let response = await axios.get(API_URL + '/trabajadors/user/' + user_id, {\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  }).then(function (response) {\n    //console.log(\"service->\" + JSON.stringify(response));\n    return response;\n  }).catch(function (error) {\n    console.error(\"Error al obtener datos del trabajador. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n  const worker = createWorkerAdapter(response.data); //console.log(\"Trabajador recuperador:\", JSON.stringify(response.data));\n\n  return worker;\n};\n\nconst getCashierByWorker = async (token, worker_id) => {\n  //console.log(\"USER ID BUSCADO: \" + user_id)\n  let response = await axios.get(API_URL + '/cajeros/trabajador/' + worker_id, {\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  }).then(function (response) {\n    //console.log(\"service->\" + JSON.stringify(response));\n    return response;\n  }).catch(function (error) {\n    console.error(\"Error al obtener datos del trabajador. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n  const cashier = createCashierAdapter(response.data); //console.log(\"Cajero recuperado:\", JSON.stringify(response.data));\n\n  return cashier;\n};\n\nconst getRecorderByWorker = async (token, worker_id) => {\n  //console.log(\"USER ID BUSCADO: \" + user_id)\n  let response = await axios.get(API_URL + '/registradors/trabajador/' + worker_id, {\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  }).then(function (response) {\n    //console.log(\"service->\" + JSON.stringify(response));\n    return response;\n  }).catch(function (error) {\n    console.error(\"Error al obtener datos del trabajador. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n  const cashier = createCashierAdapter(response.data); //console.log(\"Cajero recuperado:\", JSON.stringify(response.data));\n\n  return cashier;\n};\n\nexport { login, getCashierByWorker, getWorkerByUser, getRecorderByWorker };","map":{"version":3,"names":["axios","createWorkerAdapter","createCashierAdapter","createClubAdapter","API_URL","login","username","password","data","JSON","stringify","response","post","headers","then","console","log","catch","error","code","response2","get","id_token","status","usuario","worker","getWorkerByUser","id","club","firstName","lastName","email","imageUrl","activated","langKey","token","user_id","getCashierByWorker","worker_id","cashier","getRecorderByWorker"],"sources":["/media/eduardo/DatosUbuntu/Universidad/TY Clients/ty-clients/frontend/ty-clients/src/services/public.service.ts"],"sourcesContent":["import { User } from '../models/user.model';\nimport axios from 'axios';\nimport { createWorkerAdapter } from '../adapters/worker.adapter';\nimport { createCashierAdapter } from '../adapters//Cashier/cashier.adapter';\nimport { Worker } from '../models/worker.model';\nimport { Cashier } from '../models/Cashier/cashier.model'; \nimport { createClubAdapter } from '../adapters/club.adapter';\nimport { responsiveFontSizes } from '@mui/material';\n\nconst API_URL: string = \"http://localhost:8080/api\";\n\nconst login = async (username:string, password:string) => {\n  //console.log(\"Lo que llega a services/login \" + username + \" - \" + password);\n  \n  var data = JSON.stringify({\n    \"username\": username,\n    \"password\": password\n  });\n\n  let response = await axios.post(API_URL +'/authenticate', data , { headers: {'Content-Type': 'application/json'} })\n  .then(function (response) {\n    console.log(\"service/authenticate/response->\" + JSON.stringify(response));\n    return response;\n  })\n  .catch(function (error) {\n    console.log(\"Error al autenticarse y obtener el token. Type error -> \" + error);\n    return error;\n  });\n\n  //console.log(\"DATOS OBJTENIDOS EN RESPONSE -> \" + JSON.stringify(response.code));\n  switch(response.code){\n    case \"ERR_NETWORK\":\n      return 0;\n    case \"ERR_BAD_REQUEST\":\n      return 401;\n    default:\n      break;\n  }\n\n  let response2 = await axios.get(API_URL + '/account', { headers: {'Authorization': 'Bearer ' + response.data.id_token}})\n  .then(function (response) {\n    console.log(\"service/account/response->\" + JSON.stringify(response));\n    return response;\n  })\n  .catch(function (error) {\n    console.error(\"Error al obtener datos del usuario. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n\n\n  switch(response2.code){\n    case \"ERR_NETWORK\":\n      return 0;\n    case \"ERR_BAD_REQUEST\":\n      return 401;\n    default:\n      break;\n  }\n\n  //console.log(\"DATOS OBJTENIDOS EN RESPONSE2 -> \" + JSON.stringify(response2.data));\n  let usuario: User;\n   \n  \n  if((response.status === 200 && response2.status === 200)){\n    const worker = await getWorkerByUser(response.data.id_token, response2.data.id);\n    //console.log(\"DATOS DE CASHIER->\" + JSON.stringify(cashier));\n    //console.log(\"DATOS DEL CLUB ->\" + createClubAdapter(worker.club).nombre);\n    const club = createClubAdapter(worker.club);\n    \n    usuario = {\n      id_token: response.data.id_token,\n      id: response2.data.id,\n      login: response2.data.login,\n      firstName: response2.data.firstName,\n      lastName: response2.data.lastName,\n      email: response2.data.email,\n      imageUrl: response2.data.imageUrl,\n      activated: response2.data.activated,\n      langKey: response2.data.langKey,\n      club: club\n    };\n\n    return usuario;\n  }\n\n};\n\nconst getWorkerByUser = async (token: string, user_id: number) => {\n  console.log(\"USER ID BUSCADO: \" + user_id)\n  let response = await axios.get(API_URL + '/trabajadors/user/'+user_id, { headers: {'Authorization': 'Bearer ' + token}})\n  .then(function (response) {\n    //console.log(\"service->\" + JSON.stringify(response));\n    return response;\n  })\n  .catch(function (error) {\n    console.error(\"Error al obtener datos del trabajador. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n\n\n  const worker: Worker = createWorkerAdapter(response.data);\n\n  //console.log(\"Trabajador recuperador:\", JSON.stringify(response.data));\n\n  return worker;\n}\n\nconst getCashierByWorker = async (token: string, worker_id: number) => {\n  //console.log(\"USER ID BUSCADO: \" + user_id)\n  let response = await axios.get(API_URL + '/cajeros/trabajador/'+worker_id, { headers: {'Authorization': 'Bearer ' + token}})\n  .then(function (response) {\n    //console.log(\"service->\" + JSON.stringify(response));\n    return response;\n  })\n  .catch(function (error) {\n    console.error(\"Error al obtener datos del trabajador. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n\n\n  const cashier: Cashier = createCashierAdapter(response.data);\n\n  //console.log(\"Cajero recuperado:\", JSON.stringify(response.data));\n\n  return cashier;\n};\n\nconst getRecorderByWorker = async (token: string, worker_id: number) => {\n  //console.log(\"USER ID BUSCADO: \" + user_id)\n  let response = await axios.get(API_URL + '/registradors/trabajador/'+worker_id, { headers: {'Authorization': 'Bearer ' + token}})\n  .then(function (response) {\n    //console.log(\"service->\" + JSON.stringify(response));\n    return response;\n  })\n  .catch(function (error) {\n    console.error(\"Error al obtener datos del trabajador. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n\n\n  const cashier: Cashier = createCashierAdapter(response.data);\n\n  //console.log(\"Cajero recuperado:\", JSON.stringify(response.data));\n\n  return cashier;\n};\n\n\nexport {login, getCashierByWorker, getWorkerByUser, getRecorderByWorker}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}