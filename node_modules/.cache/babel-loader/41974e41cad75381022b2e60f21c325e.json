{"ast":null,"code":"import axios from 'axios';\nimport { createWorkerAdapter } from '../adapters/worker.adapter';\nimport { createCashierAdapter } from '../adapters//Cashier/cashier.adapter';\nimport { createRecorderAdapter } from '../adapters/AssociateCustomer/recorder.adapter';\nimport { createClubAdapter } from '../adapters/club.adapter';\nconst API_URL = \"http://localhost:8080/api\";\n\nconst login = async (username, password) => {\n  //console.log(\"Lo que llega a services/login \" + username + \" - \" + password);\n  var data = JSON.stringify({\n    \"username\": username,\n    \"password\": password\n  });\n  let response = await axios.post(API_URL + '/authenticate', data, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    //console.log(\"service/authenticate/response->\" + JSON.stringify(response));\n    return response;\n  }).catch(function (error) {\n    //console.log(\"Error al autenticarse y obtener el token. Type error -> \" + error);\n    return error;\n  }); //console.log(\"DATOS OBJTENIDOS EN RESPONSE -> \" + JSON.stringify(response.code));\n\n  switch (response.code) {\n    case \"ERR_NETWORK\":\n      return 0;\n\n    case \"ERR_BAD_REQUEST\":\n      return 401;\n\n    default:\n      break;\n  }\n\n  let response2 = await axios.get(API_URL + '/account', {\n    headers: {\n      'Authorization': 'Bearer ' + response.data.id_token\n    }\n  }).then(function (response) {\n    //console.log(\"service/account/response->\" + JSON.stringify(response));\n    return response;\n  }).catch(function (error) {\n    //console.error(\"Error al obtener datos del usuario. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n\n  switch (response2.code) {\n    case \"ERR_NETWORK\":\n      return 0;\n\n    case \"ERR_BAD_REQUEST\":\n      return 401;\n\n    default:\n      break;\n  } //console.log(\"DATOS OBJTENIDOS EN RESPONSE2 -> \" + JSON.stringify(response2.data));\n\n\n  let usuario;\n\n  if (response.status === 200 && response2.status === 200) {\n    const worker = await getWorkerByUser(response.data.id_token, response2.data.id); //console.log(\"DATOS DE CASHIER->\" + JSON.stringify(cashier));\n    //console.log(\"DATOS DEL CLUB ->\" + createClubAdapter(worker.club).nombre);\n\n    const club = createClubAdapter(worker.club);\n    usuario = {\n      id_token: response.data.id_token,\n      id: response2.data.id,\n      login: response2.data.login,\n      firstName: response2.data.firstName,\n      lastName: response2.data.lastName,\n      email: response2.data.email,\n      imageUrl: response2.data.imageUrl,\n      activated: response2.data.activated,\n      langKey: response2.data.langKey,\n      club: club\n    };\n    return usuario;\n  }\n};\n\nconst getWorkerByUser = async (token, user_id) => {\n  //console.log(\"USER ID BUSCADO: \" + user_id)\n  let response = await axios.get(API_URL + '/trabajadors/user/' + user_id, {\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  }).then(function (response) {\n    //console.log(\"service->\" + JSON.stringify(response));\n    return response;\n  }).catch(function (error) {\n    console.error(\"Error al obtener datos del trabajador. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n  const worker = createWorkerAdapter(response.data); //console.log(\"Trabajador recuperador:\", JSON.stringify(response.data));\n\n  return worker;\n};\n\nconst getCashierByWorker = async (token, worker_id) => {\n  //console.log(\"USER ID BUSCADO: \" + user_id)\n  let response = await axios.get(API_URL + '/cajeros/trabajador/' + worker_id, {\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  }).then(function (response) {\n    //console.log(\"service->\" + JSON.stringify(response));\n    return response;\n  }).catch(function (error) {\n    //console.error(\"Error al obtener datos del trabajador. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n\n  if (response.status === 200) {\n    const cashier = createCashierAdapter(response.data);\n    return cashier;\n  } else {\n    return null;\n  } //console.log(\"Cajero recuperado:\", JSON.stringify(response.data));\n\n};\n\nconst getRecorderByWorker = async (token, worker_id) => {\n  //console.log(\"USER ID BUSCADO: \" + user_id)\n  let response = await axios.get(API_URL + '/registradors/trabajador/' + worker_id, {\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  }).then(function (response) {\n    //console.log(\"service->\" + JSON.stringify(response));\n    return response;\n  }).catch(function (error) {\n    //console.error(\"Error al obtener datos del trabajador. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n\n  if (response.status === 200) {\n    const recorder = createRecorderAdapter(response.data);\n    return recorder;\n  } else {\n    return null;\n  }\n};\n\nexport { login, getCashierByWorker, getWorkerByUser, getRecorderByWorker };","map":{"version":3,"names":["axios","createWorkerAdapter","createCashierAdapter","createRecorderAdapter","createClubAdapter","API_URL","login","username","password","data","JSON","stringify","response","post","headers","then","catch","error","code","response2","get","id_token","status","usuario","worker","getWorkerByUser","id","club","firstName","lastName","email","imageUrl","activated","langKey","token","user_id","console","getCashierByWorker","worker_id","cashier","getRecorderByWorker","recorder"],"sources":["/media/eduardo/DatosUbuntu/Universidad/TY Clients/ty-clients/frontend/ty-clients/src/services/public.service.ts"],"sourcesContent":["import { User } from '../models/user.model';\nimport axios from 'axios';\nimport { createWorkerAdapter } from '../adapters/worker.adapter';\nimport { createCashierAdapter } from '../adapters//Cashier/cashier.adapter';\nimport { createRecorderAdapter } from '../adapters/AssociateCustomer/recorder.adapter';\nimport { Recorder } from '../models/AssociateCustomer/recorder.model';\nimport { Worker } from '../models/worker.model';\nimport { Cashier } from '../models/Cashier/cashier.model'; \nimport { createClubAdapter } from '../adapters/club.adapter';\n\nconst API_URL: string = \"http://localhost:8080/api\";\n\nconst login = async (username:string, password:string) => {\n  //console.log(\"Lo que llega a services/login \" + username + \" - \" + password);\n  \n  var data = JSON.stringify({\n    \"username\": username,\n    \"password\": password\n  });\n\n  let response = await axios.post(API_URL +'/authenticate', data , { headers: {'Content-Type': 'application/json'} })\n  .then(function (response) {\n    //console.log(\"service/authenticate/response->\" + JSON.stringify(response));\n    return response;\n  })\n  .catch(function (error) {\n    //console.log(\"Error al autenticarse y obtener el token. Type error -> \" + error);\n    return error;\n  });\n\n  //console.log(\"DATOS OBJTENIDOS EN RESPONSE -> \" + JSON.stringify(response.code));\n  switch(response.code){\n    case \"ERR_NETWORK\":\n      return 0;\n    case \"ERR_BAD_REQUEST\":\n      return 401;\n    default:\n      break;\n  }\n\n  let response2 = await axios.get(API_URL + '/account', { headers: {'Authorization': 'Bearer ' + response.data.id_token}})\n  .then(function (response) {\n    //console.log(\"service/account/response->\" + JSON.stringify(response));\n    return response;\n  })\n  .catch(function (error) {\n    //console.error(\"Error al obtener datos del usuario. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n\n\n  switch(response2.code){\n    case \"ERR_NETWORK\":\n      return 0;\n    case \"ERR_BAD_REQUEST\":\n      return 401;\n    default:\n      break;\n  }\n\n  //console.log(\"DATOS OBJTENIDOS EN RESPONSE2 -> \" + JSON.stringify(response2.data));\n  let usuario: User;\n   \n  \n  if((response.status === 200 && response2.status === 200)){\n    const worker = await getWorkerByUser(response.data.id_token, response2.data.id);\n    //console.log(\"DATOS DE CASHIER->\" + JSON.stringify(cashier));\n    //console.log(\"DATOS DEL CLUB ->\" + createClubAdapter(worker.club).nombre);\n    const club = createClubAdapter(worker.club);\n    \n    usuario = {\n      id_token: response.data.id_token,\n      id: response2.data.id,\n      login: response2.data.login,\n      firstName: response2.data.firstName,\n      lastName: response2.data.lastName,\n      email: response2.data.email,\n      imageUrl: response2.data.imageUrl,\n      activated: response2.data.activated,\n      langKey: response2.data.langKey,\n      club: club\n    };\n\n    return usuario;\n  }\n\n};\n\nconst getWorkerByUser = async (token: string, user_id: number) => {\n  //console.log(\"USER ID BUSCADO: \" + user_id)\n  let response = await axios.get(API_URL + '/trabajadors/user/'+user_id, { headers: {'Authorization': 'Bearer ' + token}})\n  .then(function (response) {\n    //console.log(\"service->\" + JSON.stringify(response));\n    return response;\n  })\n  .catch(function (error) {\n    console.error(\"Error al obtener datos del trabajador. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n\n\n  const worker: Worker = createWorkerAdapter(response.data);\n\n  //console.log(\"Trabajador recuperador:\", JSON.stringify(response.data));\n\n  return worker;\n}\n\nconst getCashierByWorker = async (token: string, worker_id: number) => {\n  //console.log(\"USER ID BUSCADO: \" + user_id)\n  let response = await axios.get(API_URL + '/cajeros/trabajador/'+worker_id, { headers: {'Authorization': 'Bearer ' + token}})\n  .then(function (response) {\n    //console.log(\"service->\" + JSON.stringify(response));\n    return response;\n  })\n  .catch(function (error) {\n    //console.error(\"Error al obtener datos del trabajador. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n  \n  if(response.status === 200){\n    const cashier: Cashier = createCashierAdapter(response.data);\n    return cashier;\n  } else {\n    return null;\n  }\n  //console.log(\"Cajero recuperado:\", JSON.stringify(response.data));\n\n  \n};\n\nconst getRecorderByWorker = async (token: string, worker_id: number) => {\n  //console.log(\"USER ID BUSCADO: \" + user_id)\n  let response = await axios.get(API_URL + '/registradors/trabajador/'+worker_id, { headers: {'Authorization': 'Bearer ' + token}})\n  .then(function (response) {\n    //console.log(\"service->\" + JSON.stringify(response));\n    return response;\n  })\n  .catch(function (error) {\n    //console.error(\"Error al obtener datos del trabajador. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n\n\n  if(response.status === 200){\n    const recorder: Recorder = createRecorderAdapter(response.data);\n    return recorder;\n  } else {\n    return null;\n  }\n};\n\n\nexport {login, getCashierByWorker, getWorkerByUser, getRecorderByWorker}\n"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,4BAApC;AACA,SAASC,oBAAT,QAAqC,sCAArC;AACA,SAASC,qBAAT,QAAsC,gDAAtC;AAIA,SAASC,iBAAT,QAAkC,0BAAlC;AAEA,MAAMC,OAAe,GAAG,2BAAxB;;AAEA,MAAMC,KAAK,GAAG,OAAOC,QAAP,EAAwBC,QAAxB,KAA4C;EACxD;EAEA,IAAIC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;IACxB,YAAYJ,QADY;IAExB,YAAYC;EAFY,CAAf,CAAX;EAKA,IAAII,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAN,CAAWR,OAAO,GAAE,eAApB,EAAqCI,IAArC,EAA4C;IAAEK,OAAO,EAAE;MAAC,gBAAgB;IAAjB;EAAX,CAA5C,EACpBC,IADoB,CACf,UAAUH,QAAV,EAAoB;IACxB;IACA,OAAOA,QAAP;EACD,CAJoB,EAKpBI,KALoB,CAKd,UAAUC,KAAV,EAAiB;IACtB;IACA,OAAOA,KAAP;EACD,CARoB,CAArB,CARwD,CAkBxD;;EACA,QAAOL,QAAQ,CAACM,IAAhB;IACE,KAAK,aAAL;MACE,OAAO,CAAP;;IACF,KAAK,iBAAL;MACE,OAAO,GAAP;;IACF;MACE;EANJ;;EASA,IAAIC,SAAS,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CAAUf,OAAO,GAAG,UAApB,EAAgC;IAAES,OAAO,EAAE;MAAC,iBAAiB,YAAYF,QAAQ,CAACH,IAAT,CAAcY;IAA5C;EAAX,CAAhC,EACrBN,IADqB,CAChB,UAAUH,QAAV,EAAoB;IACxB;IACA,OAAOA,QAAP;EACD,CAJqB,EAKrBI,KALqB,CAKf,UAAUC,KAAV,EAAiB;IACtB;IACA,OAAOA,KAAK,CAACL,QAAN,CAAeU,MAAtB;EACD,CARqB,CAAtB;;EAWA,QAAOH,SAAS,CAACD,IAAjB;IACE,KAAK,aAAL;MACE,OAAO,CAAP;;IACF,KAAK,iBAAL;MACE,OAAO,GAAP;;IACF;MACE;EANJ,CAvCwD,CAgDxD;;;EACA,IAAIK,OAAJ;;EAGA,IAAIX,QAAQ,CAACU,MAAT,KAAoB,GAApB,IAA2BH,SAAS,CAACG,MAAV,KAAqB,GAApD,EAAyD;IACvD,MAAME,MAAM,GAAG,MAAMC,eAAe,CAACb,QAAQ,CAACH,IAAT,CAAcY,QAAf,EAAyBF,SAAS,CAACV,IAAV,CAAeiB,EAAxC,CAApC,CADuD,CAEvD;IACA;;IACA,MAAMC,IAAI,GAAGvB,iBAAiB,CAACoB,MAAM,CAACG,IAAR,CAA9B;IAEAJ,OAAO,GAAG;MACRF,QAAQ,EAAET,QAAQ,CAACH,IAAT,CAAcY,QADhB;MAERK,EAAE,EAAEP,SAAS,CAACV,IAAV,CAAeiB,EAFX;MAGRpB,KAAK,EAAEa,SAAS,CAACV,IAAV,CAAeH,KAHd;MAIRsB,SAAS,EAAET,SAAS,CAACV,IAAV,CAAemB,SAJlB;MAKRC,QAAQ,EAAEV,SAAS,CAACV,IAAV,CAAeoB,QALjB;MAMRC,KAAK,EAAEX,SAAS,CAACV,IAAV,CAAeqB,KANd;MAORC,QAAQ,EAAEZ,SAAS,CAACV,IAAV,CAAesB,QAPjB;MAQRC,SAAS,EAAEb,SAAS,CAACV,IAAV,CAAeuB,SARlB;MASRC,OAAO,EAAEd,SAAS,CAACV,IAAV,CAAewB,OAThB;MAURN,IAAI,EAAEA;IAVE,CAAV;IAaA,OAAOJ,OAAP;EACD;AAEF,CA1ED;;AA4EA,MAAME,eAAe,GAAG,OAAOS,KAAP,EAAsBC,OAAtB,KAA0C;EAChE;EACA,IAAIvB,QAAQ,GAAG,MAAMZ,KAAK,CAACoB,GAAN,CAAUf,OAAO,GAAG,oBAAV,GAA+B8B,OAAzC,EAAkD;IAAErB,OAAO,EAAE;MAAC,iBAAiB,YAAYoB;IAA9B;EAAX,CAAlD,EACpBnB,IADoB,CACf,UAAUH,QAAV,EAAoB;IACxB;IACA,OAAOA,QAAP;EACD,CAJoB,EAKpBI,KALoB,CAKd,UAAUC,KAAV,EAAiB;IACtBmB,OAAO,CAACnB,KAAR,CAAc,0DAA0DA,KAAK,CAACL,QAAN,CAAeU,MAAvF;IACA,OAAOL,KAAK,CAACL,QAAN,CAAeU,MAAtB;EACD,CARoB,CAArB;EAWA,MAAME,MAAc,GAAGvB,mBAAmB,CAACW,QAAQ,CAACH,IAAV,CAA1C,CAbgE,CAehE;;EAEA,OAAOe,MAAP;AACD,CAlBD;;AAoBA,MAAMa,kBAAkB,GAAG,OAAOH,KAAP,EAAsBI,SAAtB,KAA4C;EACrE;EACA,IAAI1B,QAAQ,GAAG,MAAMZ,KAAK,CAACoB,GAAN,CAAUf,OAAO,GAAG,sBAAV,GAAiCiC,SAA3C,EAAsD;IAAExB,OAAO,EAAE;MAAC,iBAAiB,YAAYoB;IAA9B;EAAX,CAAtD,EACpBnB,IADoB,CACf,UAAUH,QAAV,EAAoB;IACxB;IACA,OAAOA,QAAP;EACD,CAJoB,EAKpBI,KALoB,CAKd,UAAUC,KAAV,EAAiB;IACtB;IACA,OAAOA,KAAK,CAACL,QAAN,CAAeU,MAAtB;EACD,CARoB,CAArB;;EAUA,IAAGV,QAAQ,CAACU,MAAT,KAAoB,GAAvB,EAA2B;IACzB,MAAMiB,OAAgB,GAAGrC,oBAAoB,CAACU,QAAQ,CAACH,IAAV,CAA7C;IACA,OAAO8B,OAAP;EACD,CAHD,MAGO;IACL,OAAO,IAAP;EACD,CAjBoE,CAkBrE;;AAGD,CArBD;;AAuBA,MAAMC,mBAAmB,GAAG,OAAON,KAAP,EAAsBI,SAAtB,KAA4C;EACtE;EACA,IAAI1B,QAAQ,GAAG,MAAMZ,KAAK,CAACoB,GAAN,CAAUf,OAAO,GAAG,2BAAV,GAAsCiC,SAAhD,EAA2D;IAAExB,OAAO,EAAE;MAAC,iBAAiB,YAAYoB;IAA9B;EAAX,CAA3D,EACpBnB,IADoB,CACf,UAAUH,QAAV,EAAoB;IACxB;IACA,OAAOA,QAAP;EACD,CAJoB,EAKpBI,KALoB,CAKd,UAAUC,KAAV,EAAiB;IACtB;IACA,OAAOA,KAAK,CAACL,QAAN,CAAeU,MAAtB;EACD,CARoB,CAArB;;EAWA,IAAGV,QAAQ,CAACU,MAAT,KAAoB,GAAvB,EAA2B;IACzB,MAAMmB,QAAkB,GAAGtC,qBAAqB,CAACS,QAAQ,CAACH,IAAV,CAAhD;IACA,OAAOgC,QAAP;EACD,CAHD,MAGO;IACL,OAAO,IAAP;EACD;AACF,CAnBD;;AAsBA,SAAQnC,KAAR,EAAe+B,kBAAf,EAAmCZ,eAAnC,EAAoDe,mBAApD"},"metadata":{},"sourceType":"module"}