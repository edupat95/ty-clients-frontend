{"ast":null,"code":"import axios from 'axios';\nimport { createWorkerAdapter } from '../adapters/worker.adapter';\nimport { createClubAdapter } from '../adapters/club.adapter';\nconst API_URL = \"http://localhost:8080/api\";\n\nconst login = async (username, password) => {\n  //console.log(\"Lo que llega a services/login \" + username + \" - \" + password);\n  var data = JSON.stringify({\n    \"username\": username,\n    \"password\": password\n  });\n  let response = await axios.post(API_URL + '/authenticate', data, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    //console.log(\"service/response->\" + JSON.stringify(response.status));\n    return response;\n  }).catch(function (error) {\n    console.log(\"HAY ERROR -> \" + error.status);\n    console.error(\"Error al obtener el token. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n  console.log(\"DATOS OBJTENIDOS EN RESPONSE -> \" + response);\n\n  if (response === 401 || response === 0 || response === undefined) {\n    return response;\n  }\n\n  let response2 = await axios.get(API_URL + '/account', {\n    headers: {\n      'Authorization': 'Bearer ' + response.data.id_token\n    }\n  }).then(function (response) {\n    //console.log(\"service->\" + JSON.stringify(response));\n    return response;\n  }).catch(function (error) {\n    console.error(\"Error al obtener datos del usuario. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n\n  if (response2 === 401 || response2 === 0) {\n    console.error(\"Error en response2 -> \" + response2);\n    return response2;\n  }\n\n  console.log(\"DATOS OBJTENIDOS EN RESPONSE2 -> \" + JSON.stringify(response2.data));\n  let usuario;\n\n  if (response.status === 200 && response2.status === 200) {\n    const worker = await getWorkerByUser(response.data.id_token, response2.data.id);\n    console.log(\"DATOS DEL CLUB ->\" + createClubAdapter(worker.club).nombre);\n    const club = createClubAdapter(worker.club);\n    usuario = {\n      id_token: response.data.id_token,\n      id: response2.data.id,\n      login: response2.data.login,\n      firstName: response2.data.firstName,\n      lastName: response2.data.lastName,\n      email: response2.data.email,\n      imageUrl: response2.data.imageUrl,\n      activated: response2.data.activated,\n      langKey: response2.data.langKey,\n      club: club\n    };\n    return usuario;\n  }\n};\n\nconst getWorkerByUser = async (token, user_id) => {\n  console.log(\"USER ID BUSCADO: \" + user_id);\n  let response = await axios.get(API_URL + '/trabajadors/user/' + user_id, {\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  }).then(function (response) {\n    //console.log(\"service->\" + JSON.stringify(response));\n    return response;\n  }).catch(function (error) {\n    console.error(\"Error al obtener datos del trabajador. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n  const worker = createWorkerAdapter(response.data);\n  console.log(\"Trabajador recuperador:\", JSON.stringify(response.data));\n  return worker;\n};\n\nexport { login };","map":{"version":3,"names":["axios","createWorkerAdapter","createClubAdapter","API_URL","login","username","password","data","JSON","stringify","response","post","headers","then","catch","error","console","log","status","undefined","response2","get","id_token","usuario","worker","getWorkerByUser","id","club","nombre","firstName","lastName","email","imageUrl","activated","langKey","token","user_id"],"sources":["/media/eduardo/DatosUbuntu/Universidad/TY Clients/ty-clients/frontend/ty-clients/src/services/public.service.ts"],"sourcesContent":["import { User } from '../models/user.model';\nimport axios from 'axios';\nimport { createWorkerAdapter } from '../adapters/worker.adapter';\nimport { Worker } from '../models/worker.model';\nimport { createClubAdapter } from '../adapters/club.adapter';\n\nconst API_URL: string = \"http://localhost:8080/api\";\n\nconst login = async (username:string, password:string) => {\n  //console.log(\"Lo que llega a services/login \" + username + \" - \" + password);\n  \n  var data = JSON.stringify({\n    \"username\": username,\n    \"password\": password\n  });\n\n  let response = await axios.post(API_URL +'/authenticate', data , { headers: {'Content-Type': 'application/json'} })\n  .then(function (response) {\n    //console.log(\"service/response->\" + JSON.stringify(response.status));\n    return response;\n  })\n  .catch(function (error) {\n    console.log(\"HAY ERROR -> \" + error.status);\n    console.error(\"Error al obtener el token. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n\n  console.log(\"DATOS OBJTENIDOS EN RESPONSE -> \" + response);\n\n  if(response === 401 || response === 0 || response === undefined){\n    return response;\n  } \n\n  let response2 = await axios.get(API_URL + '/account', { headers: {'Authorization': 'Bearer ' + response.data.id_token}})\n  .then(function (response) {\n    //console.log(\"service->\" + JSON.stringify(response));\n    return response;\n  })\n  .catch(function (error) {\n    console.error(\"Error al obtener datos del usuario. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n\n\n  if(response2 === 401 || response2 === 0){\n    console.error(\"Error en response2 -> \" + response2);\n    return response2;\n  }\n\n  console.log(\"DATOS OBJTENIDOS EN RESPONSE2 -> \" + JSON.stringify(response2.data));\n  let usuario: User;\n   \n  \n  if((response.status === 200 && response2.status === 200)){\n    const worker = await getWorkerByUser(response.data.id_token, response2.data.id); \n    console.log(\"DATOS DEL CLUB ->\" + createClubAdapter(worker.club).nombre);\n    const club = createClubAdapter(worker.club);\n    usuario = {\n      id_token: response.data.id_token,\n      id: response2.data.id,\n      login: response2.data.login,\n      firstName: response2.data.firstName,\n      lastName: response2.data.lastName,\n      email: response2.data.email,\n      imageUrl: response2.data.imageUrl,\n      activated: response2.data.activated,\n      langKey: response2.data.langKey,\n      club: club\n    };\n\n    \n    \n\n    return usuario;\n  }\n\n};\n\nconst getWorkerByUser = async (token: string, user_id: number) => {\n  console.log(\"USER ID BUSCADO: \" + user_id)\n  let response = await axios.get(API_URL + '/trabajadors/user/'+user_id, { headers: {'Authorization': 'Bearer ' + token}})\n  .then(function (response) {\n    //console.log(\"service->\" + JSON.stringify(response));\n    return response;\n  })\n  .catch(function (error) {\n    console.error(\"Error al obtener datos del trabajador. Type error -> \" + error.response.status);\n    return error.response.status;\n  });\n\n  const worker: Worker = createWorkerAdapter(response.data);\n\n  console.log(\"Trabajador recuperador:\", JSON.stringify(response.data));\n\n  return worker;\n}\nexport {login}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}